name: Manage EKS Cluster and Check S3 Access

on:
  workflow_dispatch:
    inputs:
      clusterName:
        description: 'Name of the EKS cluster'
        required: true
      awsRegion:
        description: 'AWS Region for the cluster'
        required: true
      action:
        description: 'Action to perform (apply/destroy)'
        required: true
        type: choice
        options:
          - apply
          - destroy

env:
  TF_WORKING_DIR: Terraform
  TF_STATE_BUCKET: terraform-bucket20240816  # Corrected bucket name

jobs:
  manage_cluster:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.awsRegion }}

      - name: Create S3 bucket for Terraform state if not exists
        run: |
          if aws s3 ls "s3://${TF_STATE_BUCKET}" 2>&1 | grep -q 'NoSuchBucket'; then
            echo "Creating S3 bucket"
            aws s3 mb "s3://${TF_STATE_BUCKET}" --region ${{ github.event.inputs.awsRegion }}
            # Wait for a moment to ensure the bucket is available
            sleep 10
          else
            echo "S3 bucket already exists"
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.9

      - name: Terraform Init
        run: |
          # Ensure the backend configuration is correct
          cat <<EOF > backend.tf
          terraform {
            backend "s3" {
              bucket = "${TF_STATE_BUCKET}"
              key    = "terraform.tfstate"
              region = "${{ github.event.inputs.awsRegion }}"
            }
          }
          EOF
          terraform init -upgrade
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Format
        run: terraform fmt -check
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Plan
        run: terraform plan -var="cluster_name=${{ github.event.inputs.clusterName }}" -var="region=${{ github.event.inputs.awsRegion }}"
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        run: terraform apply -auto-approve -var="cluster_name=${{ github.event.inputs.clusterName }}" -var="region=${{ github.event.inputs.awsRegion }}"
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: terraform destroy -auto-approve -var="cluster_name=${{ github.event.inputs.clusterName }}" -var="region=${{ github.event.inputs.awsRegion }}"
        working-directory: ${{ env.TF_WORKING_DIR }}
