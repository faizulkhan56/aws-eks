name: Manage EKS Cluster and Check S3 Access

on:
  workflow_dispatch:
    inputs:
      clusterName:
        description: 'Name of the EKS cluster'
        required: true
      awsRegion:
        description: 'AWS Region for the cluster'
        required: true
      action:
        description: 'Action to perform (apply/destroy)'
        required: true

jobs:
  check_s3_access:
    runs-on: ubuntu-latest
    outputs:
      s3_check_success: ${{ steps.check_s3.outputs.success }}
    steps:
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ github.event.inputs.awsRegion }}

    - name: Check S3 Access
      id: check_s3
      run: |
        aws s3 ls
        if [ $? -ne 0 ]; then
          echo "S3 access check failed."
          exit 1
        else
          echo "S3 access check passed."
          echo "s3_check_success=true" >> $GITHUB_ENV
        fi

  apply_cluster:
    runs-on: ubuntu-latest
    needs: check_s3_access
    if: ${{ env.s3_check_success == 'true' && github.event.inputs.action == 'apply' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.3.9  # Adjust the Terraform version as needed

    - name: Terraform Init
      run: terraform init
      working-directory: Terraform

    - name: Terraform Format
      run: terraform fmt
      working-directory: Terraform

    - name: Terraform Validate
      run: terraform validate
      working-directory: Terraform

    - name: Terraform Apply
      run: terraform apply -var clusterName=${{ github.event.inputs.clusterName }} -var awsRegion=${{ github.event.inputs.awsRegion }} -auto-approve
      working-directory: Terraform

  destroy_cluster:
    runs-on: ubuntu-latest
    needs: check_s3_access
    if: ${{ env.s3_check_success == 'true' && github.event.inputs.action == 'destroy' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.3.9  # Adjust the Terraform version as needed

    - name: Terraform Init
      run: terraform init
      working-directory: Terraform

    - name: Terraform Format
      run: terraform fmt
      working-directory: Terraform

    - name: Terraform Validate
      run: terraform validate
      working-directory: Terraform

    - name: Terraform Destroy
      run: terraform destroy -var clusterName=${{ github.event.inputs.clusterName }} -var awsRegion=${{ github.event.inputs.awsRegion }} -auto-approve
      working-directory: Terraform
