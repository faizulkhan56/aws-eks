name: Manage EKS Cluster and Check S3 Access

on:
  workflow_dispatch:
    inputs:
      clusterName:
        description: 'Name of the EKS cluster'
        required: true
      awsRegion:
        description: 'AWS Region for the cluster'
        required: true
      action:
        description: 'Action to perform (apply/destroy)'
        required: true
        type: choice
        options:
          - apply
          - destroy

env:
  TF_WORKING_DIR: Terraform

jobs:
  check_s3_access:
    runs-on: ubuntu-latest
    outputs:
      s3_check_success: ${{ steps.check_s3.outputs.success }}
    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ github.event.inputs.awsRegion }}

    - name: Check S3 Access
      id: check_s3
      run: |
        if aws s3 ls &>/dev/null; then
          echo "S3 access check passed."
          echo "success=true" >> $GITHUB_OUTPUT
        else
          echo "S3 access check failed."
          echo "success=false" >> $GITHUB_OUTPUT
        fi

  manage_cluster:
    needs: check_s3_access
    if: needs.check_s3_access.outputs.s3_check_success == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ github.event.inputs.awsRegion }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.9

    - name: Terraform Init
      run: terraform init
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Format
      run: terraform fmt -check
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Validate
      run: terraform validate
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Plan
      run: terraform plan -var="cluster_name=${{ github.event.inputs.clusterName }}" -var="region=${{ github.event.inputs.awsRegion }}"
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Apply
      if: github.event.inputs.action == 'apply'
      run: terraform apply -auto-approve -var="cluster_name=${{ github.event.inputs.clusterName }}" -var="region=${{ github.event.inputs.awsRegion }}"
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: terraform destroy -auto-approve -var="cluster_name=${{ github.event.inputs.clusterName }}" -var="region=${{ github.event.inputs.awsRegion }}"
      working-directory: ${{ env.TF_WORKING_DIR }}